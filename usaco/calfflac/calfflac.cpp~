/*
ID: kashthe1
LANG: C++
TASK: calfflac
*/
/*******************************************************************************
 *	Author 		: Kashyap R Puranik ( kashyap.r.puranik at gmail dot com )
 *	fileName	: calfflac.cpp
 *	description : solves the problem in usaco by the name calfflac
 *
 *	date 		: 05/09/2009 19:03:45 
 ******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <list>

using namespace std;
int main()
{
	// Open input and output files
	FILE *fp =fopen("calfflac.in","r");
	FILE *fp2 =fopen("calfflac.out","w");
	
	char string[20001];						// The input string
	char newString[20001];					// string without puctuations
	int i = 0, j;							// The counter for the string
	int len, len2;							// length of the strings
	int matrix [20001][4];					// The matrix for dynamic programming
	int limit = 2000;						// The maximum length of the palindrome
	int max;								// one of the required solutions
	list<int> posList;
	int pos;								// position of the palindrome

	max = 1;
	while( !feof(fp))
	{
		string[i++] = getc(fp);
	}
	len = i;
	
	for ( i = 0 , j = 0 ; i < len ; i ++ )
	{
		if (isalpha(string[i]))
			newString[j++] = tolower(string[i]);
	}
	newString[j]='\0';
	len2 = j;
	// printf("%s", newString);
	
	// Initialise the matrix
	max = 0;
	for ( i = 0 ; i < len2 - 1 ; i ++ ) {
		matrix[i][0] = 1;
		if ( newString[i] == newString[i+1] )
		{
			matrix[i][1] = 1;
			max = 1;
		}
	}
	matrix[i][0] = 1;

	// Set the limits
	limit = 1998 < len2? 1998 : len2;
/*
	for ( j = 0 ; j < len2 ; j ++ )
		printf("%c ", newString[j]);
	putchar('\n');
	for ( j = 0 ; j < len2 ; j ++ )
		printf("%d ", matrix[j][0]);
	putchar('\n');		
	for ( j = 0 ; j < len2 - 1 ; j ++ )
		printf("%d ", matrix[j][1]);
	putchar('\n');
	putchar('\n');
*/
	// Start the dynamic calculation
	for ( i = 2 ; i < limit ; i += 2 )
	{
		for ( j = 0 ; j < len2 - i; j ++ )
		{
			matrix[j][0] = 0;
			// aX...Z....Yb is a palindrome if a == b and X....Z....Y is a pal
			if ( newString[j] == newString[j+i] && matrix[j+1][0] )
			{
				matrix[j][0] = 1;
				max = i;
			}
		}
		for ( j = 0 ; j < len2 - i ; j ++ ) {
			if(matrix[j][0] )
			{
				pos = j;
				break;
			}
		}
		for ( j = 0 ; j < len2 - i - 1 ; j ++ )
		{
			matrix[j][1] = 0;
			// aX...YZ....Wb is a palindrom if a == b and X...YZ...W is a pal
			if ( newString[j] == newString[j+i+1] && matrix[j+1][1] )
			{
				matrix[j][1] = 1;
				max = i + 1;
				pos = j;
			}
		}
		for ( j = 0 ; j < len2 - i - 1; j ++ ) {
			if(matrix[j][1] )
			{
				pos = j;
				break;
			}
		}
/*
		for ( j = 0 ; j < len2 - i ; j ++ )
		{
			printf("%d ",matrix[j][0]);
		}
		putchar('\n');
		for ( j = 0 ; j < len2 - i - 1 ; j ++ )
		{
			printf("%d ",matrix[j][1]);
		}
		putchar('\n');
*/
	}
//	printf("%d %d\n", max, pos);

	// Find the beginning of the palindrome
	for ( i = 0, j = 0 ; j <= pos ; i++ ){ if (isalpha(string[i])) j++; }
	// Starting from position i-1 output exactly 'max' alphabets
	// Also output all puncts and whitespaces
	fprintf(fp2,"%d\n", max+1);
	for ( i -- , j = 0 ; j <= max ; i ++)
	{
		fprintf(fp2,"%c", string[i]);
		if(isalpha(string[i]))
			j ++;
	}
	fputc('\n', fp2);
	// Close input and output files
	fclose(fp);
	fclose(fp2);
}
